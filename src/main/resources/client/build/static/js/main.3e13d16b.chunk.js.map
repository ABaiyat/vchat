{"version":3,"sources":["components/Welcome/Welcome.js","components/MessageItem/MessageItem.js","components/MessageList/MessageList.js","components/ChatRoom/ChatRoom.js","components/RoomList/RoomList.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleButton","input","state","stomp","send","JSON","stringify","name","props","callback","greeting","setState","disconnect","setTimeout","history","push","handleChange","event","target","value","isLoading","Stomp","client","react_default","a","createElement","className","Card","centered","Content","Form","Field","Input","onChange","placeholder","Button","color","fluid","onClick","Component","withRouter","MessageItem","messageType","sender","content","username","header","Fragment","Message","Header","concat","compact","MessageList","messages","messageList","map","message","components_MessageItem_MessageItem","ChatRoom","componentDidUpdate","scrollToBottom","scrollIntoView","behavior","_this$state","roomID","date","type","pathname","location","replace","connect","roomURL","topicURL","_this2","subscribe","messageObject","parse","body","length","_this3","_this$state2","as","icon","textAlign","Icon","circular","Divider","components_MessageList_MessageList","ref","action","RoomList","handleItemClick","key","toString","rooms","roomArr","split","parseInt","roomList","room","prompt","Description","App","data","BrowserRouter","Switch","Route","exact","path","component","components_Welcome_Welcome","components_RoomList_RoomList","components_ChatRoom_ChatRoom","assign","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2XAKMA,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYJI,aAAe,WAAM,IACTC,EAAUR,EAAKS,MAAfD,MACR,GAAc,KAAVA,EAAc,CACdR,EAAKU,MAAMC,KAAK,eAAgB,GAAIC,KAAKC,UAAU,CAACC,KAAMN,KAC1DR,EAAKe,MAAMC,SAASR,GACpB,IAAMS,EAAW,cAAgBT,EAAQ,IACzCR,EAAKkB,SAAS,CAACD,aACfjB,EAAKU,MAAMS,aACXC,WAAW,WACPpB,EAAKe,MAAMM,QAAQC,KAAK,WACzB,OAvBGtB,EA2BduB,aAAe,SAACC,GACZxB,EAAKkB,SAAS,CAACV,MAAOgB,EAAMC,OAAOC,SA1BnC1B,EAAKS,MAAQ,CACTD,MAAO,GACPS,SAAU,IAJJjB,2LASVG,KAAKe,SAAS,CAACS,WAAW,IAC1BxB,KAAKO,MAAQkB,IAAMC,OAAO,2KAsB1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,UAAQ,GACVL,EAAAC,EAAAC,cAACE,EAAA,EAAKE,QAAN,KACIN,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACK,EAAA,EAAKC,MAAN,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOb,MAAOvB,KAAKM,MAAMD,MAAOgC,SAAUrC,KAAKoB,aAAckB,YAAY,wBAE7EX,EAAAC,EAAAC,cAACK,EAAA,EAAKC,MAAN,KACIR,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,MAAM,OAAOC,OAAK,EAACC,QAAS1C,KAAKI,cAAzC,uBA5CduC,aAuDPC,cAAWhD,uCC9BXiD,EA3BK,SAACjC,GAAU,IAEvBkC,EACAN,EAFIO,EAA8BnC,EAA9BmC,OAAQC,EAAsBpC,EAAtBoC,QAASC,EAAarC,EAAbqC,SAGrBC,EAASvB,EAAAC,EAAAC,cAACF,EAAAC,EAAMuB,SAAP,MAab,OAZIJ,IAAWE,GACXH,EAAc,cACdN,EAAM,SACY,gBAAXO,GACPD,EAAc,gBACdN,EAAM,SAENM,EAAc,kBACdN,EAAM,QACNU,EAASvB,EAAAC,EAAAC,cAACuB,EAAA,EAAQC,OAAT,KAAiBN,IAI1BpB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAwB,OAAiBR,IAC3BnB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAASG,SAAO,EAACzB,UAAU,iBAAiBU,MAAOA,GAC9CU,EACDvB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWkB,MCXzBQ,EAVK,SAAC5C,GAAU,IACnB6C,EAAuB7C,EAAvB6C,SAAUR,EAAarC,EAAbqC,SACZS,EAAcD,EAASE,IAAI,SAACC,GAC9B,OACIjC,EAAAC,EAAAC,cAACgC,EAAD,CAAad,OAAQa,EAAQb,OAAQC,QAASY,EAAQZ,QAASC,SAAUA,MAGjF,OAAQtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAe4B,ICyG3BI,cA7GX,SAAAA,IAAc,IAAAjE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8D,IACVjE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgE,GAAA3D,KAAAH,QAoDJ+D,mBAAqB,WACjBlE,EAAKmE,kBAtDKnE,EAyDdmE,eAAiB,WACbnE,EAAK6D,YAAYO,eAAe,CAACC,SAAU,YA1DjCrE,EA6DdO,aAAe,WAAM,IAAA+D,EACOtE,EAAKS,MAAtB8D,EADUD,EACVC,OAAQ/D,EADE8D,EACF9D,MACP4C,EAAapD,EAAKe,MAAlBqC,SACR,GAAc,KAAV5C,EAAc,CACd,IAAMuD,EAAU,CACZb,OAAQE,EACRD,QAAS3C,EACTgE,KAAM,IACNC,KAAM,QAEVzE,EAAKU,MAAMC,KAAK,cAAgB4D,EAAS,eAAgB,GAAI3D,KAAKC,UAAUkD,IAC5E/D,EAAKkB,SAAS,CAACV,MAAO,OAxEhBR,EA4EduB,aAAe,SAACC,GACZxB,EAAKkB,SAAS,CAACV,MAAOgB,EAAMC,OAAOC,SA3EnC1B,EAAKS,MAAQ,CACTD,MAAO,GACP+D,OAAQ,GACRX,SAAU,IALJ5D,4MAUFoD,EAAajD,KAAKY,MAAlBqC,SACAsB,EAAavE,KAAKY,MAAM4D,SAAxBD,SACFH,EAASG,EAASE,QAAQ,UAAW,IAC3CzE,KAAKe,SAAS,CAACqD,WACfpE,KAAKgE,iBAEY,KAAbf,EACAjD,KAAKY,MAAMM,QAAQC,KAAK,KAExBnB,KAAKO,MAAQkB,IAAMC,OAAO,wCAC1B1B,KAAKO,MAAMmE,QAAQ,GAAI,WACnB,IAAMC,EAAU,cAAgBP,EAC1BQ,EAAW,gBAAkBR,EACnCS,EAAKtE,MAAMC,KAAKmE,EAAS,GAAIlE,KAAKC,UAAU,CAACC,KAAMsC,KACnD4B,EAAKtE,MAAMuE,UAAUF,EAAU,SAAChB,GAAY,IAChCH,EAAaoB,EAAKvE,MAAlBmD,SACFsB,EAAgBtE,KAAKuE,MAAMpB,EAAQqB,MAIzC,GAH2B,UAAvBF,EAAcT,MACdO,EAAKjE,MAAMM,QAAQC,KAAK,UAEJ,IAApBsC,EAASyB,OAAc,CACvB,IAAMH,EAAgB,CAClBhC,OAAQ,cACRC,QAAS,uBAAyBoB,EAAS,IAC3CC,KAAM,IACNC,KAAM,aAEVb,EAAStC,KAAK4D,QAEdtB,EAAStC,KAAK4D,GAElBF,EAAK9D,SAAS,CAAC0C,eAEnBoB,EAAKtE,MAAMuE,UAAUF,EAAW,eAAgB,SAAChB,GAAY,IACjDH,EAAaoB,EAAKvE,MAAlBmD,SACFsB,EAAgBtE,KAAKuE,MAAMpB,EAAQqB,MACzCxB,EAAStC,KAAK4D,GACdF,EAAK9D,SAAS,CAAC0C,qJAiCtB,IAAA0B,EAAAnF,KAAAoF,EACwBpF,KAAKM,MAA1BmD,EADH2B,EACG3B,SAAUW,EADbgB,EACahB,OACVnB,EAAajD,KAAKY,MAAlBqC,SACR,OACItB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQgC,GAAG,KAAKC,MAAI,EAACC,UAAU,UAC3B5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAM7E,KAAK,QAAQ6B,MAAM,QAAQiD,UAAQ,IACzC9D,EAAAC,EAAAC,cAACwB,EAAA,EAAOpB,QAAR,CAAgBH,UAAU,aAAa,QAAUsC,KAGzDzC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAS5D,UAAU,gBACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAC8D,EAAD,CAAalC,SAAUA,EAAUR,SAAUA,IAC3CtB,EAAAC,EAAAC,cAAA,OAAK+D,IAAK,SAAAlC,GAAgByB,EAAKzB,YAAcA,MAEjD/B,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAON,UAAU,aACVW,OAAK,EAAClB,MAAOvB,KAAKM,MAAMD,MACxBwF,OAAQlE,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,MAAM,OAAOE,QAAS1C,KAAKI,cAAcuB,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAM7E,KAAK,UACpE0B,SAAUrC,KAAKoB,aAAckB,YAAY,mCAtGjDK,aCAjBmD,cACF,SAAAA,IAAc,IAAAjG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8F,IACVjG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgG,GAAA3F,KAAAH,QA6BJ+F,gBAAkB,SAACC,GACfnG,EAAKU,MAAMS,aACXnB,EAAKe,MAAMM,QAAQC,KAAK,SAAW6E,EAAIC,aA9BvCpG,EAAKS,MAAQ,CACTQ,SAAU,GACVoF,MAAO,IAJDrG,sMASVG,KAAKe,SAAS,CAACS,WAAW,IAGT,KAFIxB,KAAKY,MAAlBqC,UAGJjD,KAAKY,MAAMM,QAAQC,KAAK,IAE5BnB,KAAKO,MAAQkB,IAAMC,OAAO,wCAC1B1B,KAAKO,MAAMmE,QAAQ,GAAI,WACnBG,EAAKtE,MAAMC,KAAK,aAAc,GAAI,IAClCqE,EAAKtE,MAAMuE,UAAU,eAAgB,SAAClB,GAClC,IACMuC,EADQvC,EAAQqB,KAAKR,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIA,QAAQ,kBAAmB,KAClE2B,MAAM,KACT,KAAfD,EAAQ,GACRtB,EAAK9D,SAAS,CAACmF,MAAO,KAEtBrB,EAAK9D,SAAS,CAACmF,MAAOC,EAAQxC,IAAI,SAACpC,GAAD,OAAW8E,SAAS9E,8IAW7D,IAAA4D,EAAAnF,KACGkG,EAAUlG,KAAKM,MAAf4F,MACFI,EAAWJ,EAAMvC,IAAI,SAAC4C,GACxB,OACI5E,EAAAC,EAAAC,cAAA,OAAKmE,IAAKO,EAAMzE,UAAU,YACtBH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQT,UAAU,aAAaU,MAAM,OAAOC,OAAK,EAACC,QAAS,kBAAMyC,EAAKY,gBAAgBQ,KAAQA,MAIpGC,EAA2B,IAAjBN,EAAMhB,OAClB,4CACA,yCACJ,OACIvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,UAAQ,GACVL,EAAAC,EAAAC,cAACE,EAAA,EAAKE,QAAN,CAAcH,UAAU,iBAAiBoB,OAAO,cAChDvB,EAAAC,EAAAC,cAACE,EAAA,EAAK0E,YAAN,CAAkB3E,UAAU,eAAe0E,GAC3C7E,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAS5D,UAAU,YAClBwE,WAtDE3D,aA6DRC,cAAWkD,GC9BXY,6BA1Bb,SAAAA,IAAc,IAAA7G,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0G,IACZ7G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4G,GAAAvG,KAAAH,QAKFa,SAAW,SAAC8F,GACV9G,EAAKkB,SAAS,CAACkC,SAAU0D,KALzB9G,EAAKS,MAAQ,CACX2C,SAAU,IAHApD,wEAUL,IAAAgF,EAAA7E,KACAiD,EAAYjD,KAAKM,MAAjB2C,SACP,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,KACEjF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,KACElF,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAMtF,EAAAC,EAAAC,cAACqF,EAAD,CAASrG,SAAUgE,EAAKhE,cAC/Dc,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW,kBAAMtF,EAAAC,EAAAC,cAACsF,EAAD,CAAUlE,SAAUA,OAChEtB,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAW,SAACrG,GAAD,OAAWe,EAAAC,EAAAC,cAACuF,EAADtH,OAAAuH,OAAA,GAAczG,EAAd,CAAqBqC,SAAUA,kBAnBpFN,cCGE2E,QACW,cAA7BC,OAAO/C,SAASgD,UAEe,UAA7BD,OAAO/C,SAASgD,UAEhBD,OAAO/C,SAASgD,SAASC,MACvB,2DCZNC,IAASC,OAAOhG,EAAAC,EAAAC,cAAC+F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3e13d16b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Input, Button, Form, Card } from 'semantic-ui-react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Stomp from 'stomp-websocket';\r\n\r\nclass Welcome extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            input: \"\",\r\n            greeting: \"\"\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({isLoading: true});\r\n        this.stomp = Stomp.client('ws://localhost:8080/socket/websocket');\r\n    }\r\n\r\n    handleButton = () => {\r\n        const { input } = this.state;\r\n        if (input !== \"\") {\r\n            this.stomp.send(\"/app/welcome\", {}, JSON.stringify({name: input}));\r\n            this.props.callback(input);\r\n            const greeting = 'Greetings, ' + input + '!';\r\n            this.setState({greeting});\r\n            this.stomp.disconnect();\r\n            setTimeout(() => {\r\n                this.props.history.push('/rooms');\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({input: event.target.value})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='bodyWrapper'>\r\n                <div className='welcomeBox'>\r\n                    <Card centered>\r\n                        <Card.Content>\r\n                            <h1>Welcome</h1>\r\n                            <Form>\r\n                                <Form.Field>\r\n                                    <Input value={this.state.input} onChange={this.handleChange} placeholder=\"Enter your Name...\"/>\r\n                                </Form.Field>\r\n                                <Form.Field>\r\n                                    <Button color='teal' fluid onClick={this.handleButton}>Submit</Button>\r\n                                </Form.Field>\r\n                            </Form>\r\n                        </Card.Content>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Welcome);","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\nconst MessageItem = (props) => {\r\n    const { sender, content, username } = props;\r\n    let messageType;\r\n    let color;\r\n    let header = <React.Fragment />;\r\n    if (sender === username) {\r\n        messageType = 'sentMessage';\r\n        color='white'\r\n    } else if (sender === 'HOST-SERVER') {\r\n        messageType = 'serverMessage';\r\n        color='teal'\r\n    } else {\r\n        messageType = 'receivedMessage';\r\n        color='green';\r\n        header = <Message.Header>{sender}</Message.Header>;\r\n    }\r\n\r\n    return (\r\n        <div className={`messageItem ${messageType}`}>\r\n            <Message compact className='usernameHeader' color={color}>\r\n                {header}\r\n                <p className='content'>{content}</p>\r\n            </Message>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport MessageItem from '../MessageItem/MessageItem';\r\n\r\nconst MessageList = (props) => {\r\n    const { messages, username } = props;\r\n    const messageList = messages.map((message) => {\r\n        return (\r\n            <MessageItem sender={message.sender} content={message.content} username={username}/>\r\n        )\r\n    });\r\n    return (<div className='messageList'>{messageList}</div>)\r\n};\r\n\r\nexport default MessageList;","import React, { Component } from 'react';\r\nimport { Input, Button, Icon, Header, Divider } from 'semantic-ui-react';\r\nimport Stomp from 'stomp-websocket';\r\nimport MessageList from '../MessageList/MessageList';\r\n\r\nclass ChatRoom extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            input: '',\r\n            roomID: '',\r\n            messages: [],\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { username } = this.props;\r\n        const { pathname } = this.props.location;\r\n        const roomID = pathname.replace('/rooms/', '');\r\n        this.setState({roomID});\r\n        this.scrollToBottom();\r\n\r\n        if (username === '') {\r\n            this.props.history.push('');\r\n        } else {\r\n            this.stomp = Stomp.client('ws://localhost:8080/socket/websocket');\r\n            this.stomp.connect({}, () => {\r\n                const roomURL = '/app/rooms/' + roomID;\r\n                const topicURL = '/topic/rooms/' + roomID;\r\n                this.stomp.send(roomURL, {}, JSON.stringify({name: username}));\r\n                this.stomp.subscribe(topicURL, (message) => {\r\n                    const { messages } = this.state;\r\n                    const messageObject = JSON.parse(message.body);\r\n                    if (messageObject.type === 'CLOSE') {\r\n                        this.props.history.push('/rooms');\r\n                    }\r\n                    if (messages.length === 0) {\r\n                        const messageObject = {\r\n                            sender: 'HOST-SERVER',\r\n                            content: 'Welcome to Chatroom ' + roomID + '!',\r\n                            date: 1000,\r\n                            type: 'CONNECTED'\r\n                        };\r\n                        messages.push(messageObject);\r\n                    } else {\r\n                        messages.push(messageObject);\r\n                    }\r\n                    this.setState({messages});\r\n                });\r\n                this.stomp.subscribe(topicURL + '/sendMessage', (message) => {\r\n                    const { messages } = this.state;\r\n                    const messageObject = JSON.parse(message.body);\r\n                    messages.push(messageObject);\r\n                    this.setState({messages});\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        this.scrollToBottom();\r\n    };\r\n\r\n    scrollToBottom = () => {\r\n        this.messageList.scrollIntoView({behavior: 'smooth'});\r\n    };\r\n\r\n    handleButton = () => {\r\n        const {roomID, input} = this.state;\r\n        const { username } = this.props;\r\n        if (input !== \"\") {\r\n            const message = {\r\n                sender: username,\r\n                content: input,\r\n                date: 1000,\r\n                type: 'SENT'\r\n            };\r\n            this.stomp.send('/app/rooms/' + roomID + '/sendMessage', {}, JSON.stringify(message));\r\n            this.setState({input: ''})\r\n        }\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({input: event.target.value})\r\n    };\r\n\r\n    render() {\r\n        const { messages, roomID } = this.state;\r\n        const { username } = this.props;\r\n        return (\r\n            <div className='chatRoom'>\r\n                <div>\r\n                    <div className='chatColumn'>\r\n                        <div className='roomHeader'>\r\n                            <Header as='h2' icon textAlign='center'>\r\n                                <Icon name='users' color='black' circular />\r\n                                <Header.Content className='roomTitle'>{'ROOM ' + roomID}</Header.Content>\r\n                            </Header>\r\n                        </div>\r\n                        <Divider className='chatDivider'/>\r\n                        <div className='messageContainer'>\r\n                            <MessageList messages={messages} username={username} />\r\n                            <div ref={messageList => {this.messageList = messageList}} />\r\n                        </div>\r\n                        <Input className='messageBox'\r\n                               fluid value={this.state.input}\r\n                               action={<Button color='teal' onClick={this.handleButton}><Icon name='send'/></Button>}\r\n                               onChange={this.handleChange} placeholder=\"Type your message...\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatRoom;","import React, { Component } from 'react';\r\nimport { Card, Button, Divider } from 'semantic-ui-react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Stomp from 'stomp-websocket';\r\n\r\nclass RoomList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            greeting: '',\r\n            rooms: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({isLoading: true});\r\n        const { username } = this.props;\r\n\r\n        if (username === '') {\r\n            this.props.history.push('');\r\n        }\r\n        this.stomp = Stomp.client('ws://localhost:8080/socket/websocket');\r\n        this.stomp.connect({}, () => {\r\n            this.stomp.send(\"/app/rooms\", {}, \"\");\r\n            this.stomp.subscribe('/topic/rooms', (message) => {\r\n                const rooms = message.body.replace(']', '').replace('[', '').replace(/(?:\\r\\n|\\r|\\n)/g, ',');\r\n                const roomArr = rooms.split(',');\r\n                if (roomArr[0] === \"\") {\r\n                    this.setState({rooms: []})\r\n                } else {\r\n                    this.setState({rooms: roomArr.map((value) => parseInt(value))});\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleItemClick = (key) => {\r\n        this.stomp.disconnect();\r\n        this.props.history.push('rooms/' + key.toString());\r\n    };\r\n\r\n    render() {\r\n        const { rooms } = this.state;\r\n        const roomList = rooms.map((room) => {\r\n            return (\r\n                <div key={room} className='roomItem' >\r\n                    <Button className='roomButton' color='teal' fluid onClick={() => this.handleItemClick(room)}>{room}</Button>\r\n                </div>\r\n            )\r\n        });\r\n        const prompt = (rooms.length === 0 ?\r\n            'It looks like the host has no open rooms.' :\r\n            'Select a room to join or start a chat!');\r\n        return (\r\n            <div className='roomList'>\r\n                <Card centered>\r\n                    <Card.Content className='roomListHeader' header='Room List' />\r\n                    <Card.Description className='description'>{prompt}</Card.Description>\r\n                    <Divider className='divider'/>\r\n                    {roomList}\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(RoomList);","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Welcome from './components/Welcome/Welcome';\r\nimport ChatRoom from './components/ChatRoom/ChatRoom';\r\nimport RoomList from './components/RoomList/RoomList';\r\n\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: ''\r\n    }\r\n  }\r\n  callback = (data) => {\r\n    this.setState({username: data});\r\n  };\r\n\r\n  render() {\r\n    const {username} = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n          <BrowserRouter>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={() => <Welcome callback={this.callback}/>} />\r\n              <Route exact path=\"/rooms\" component={() => <RoomList username={username}/>} />\r\n              <Route exact path=\"/rooms/:roomId\" component={(props) => <ChatRoom {...props} username={username}/>} />\r\n            </Switch>\r\n          </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}